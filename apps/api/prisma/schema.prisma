// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum SpaceType {
  personal
  business
}

enum SpaceRole {
  owner
  admin
  member
  viewer
}

enum AccountType {
  checking
  savings
  credit
  investment
  crypto
  other
}

enum Provider {
  belvo
  plaid
  bitso
  manual
}

enum ConnectionStatus {
  active
  error
  syncing
  disconnected
}

enum BudgetPeriod {
  monthly
  quarterly
  yearly
}

enum Currency {
  MXN
  USD
  EUR
}

// Models
model User {
  id               String        @id @default(uuid())
  email            String        @unique
  passwordHash     String        @map("password_hash")
  name             String
  locale           String        @default("es")
  timezone         String        @default("America/Mexico_City")
  totpSecret       String?       @map("totp_secret")
  totpTempSecret   String?       @map("totp_temp_secret")
  totpEnabled      Boolean       @default(false) @map("totp_enabled")
  totpBackupCodes  String[]      @default([]) @map("totp_backup_codes")
  emailVerified    Boolean       @default(false) @map("email_verified")
  isActive         Boolean       @default(true) @map("is_active")
  onboardingCompleted Boolean    @default(false) @map("onboarding_completed")
  onboardingCompletedAt DateTime? @map("onboarding_completed_at")
  onboardingStep   String?       @map("onboarding_step")
  lastLoginAt      DateTime?     @map("last_login_at")
  createdAt        DateTime      @default(now()) @map("created_at")
  updatedAt        DateTime      @updatedAt @map("updated_at")

  // Relations
  userSpaces       UserSpace[]
  sessions         Session[]
  auditLogs        AuditLog[]
  providerConnections ProviderConnection[]
  preferences      UserPreferences?

  @@map("users")
}

model UserPreferences {
  id                    String        @id @default(uuid())
  userId                String        @unique @map("user_id")
  
  // Notification preferences
  emailNotifications    Boolean       @default(true) @map("email_notifications")
  transactionAlerts     Boolean       @default(true) @map("transaction_alerts")
  budgetAlerts          Boolean       @default(true) @map("budget_alerts")
  weeklyReports         Boolean       @default(true) @map("weekly_reports")
  monthlyReports        Boolean       @default(true) @map("monthly_reports")
  securityAlerts        Boolean       @default(true) @map("security_alerts")
  promotionalEmails     Boolean       @default(false) @map("promotional_emails")
  
  // Mobile/Push notifications
  pushNotifications     Boolean       @default(true) @map("push_notifications")
  transactionPush       Boolean       @default(true) @map("transaction_push")
  budgetPush            Boolean       @default(true) @map("budget_push")
  securityPush          Boolean       @default(true) @map("security_push")
  
  // Privacy preferences
  dataSharing           Boolean       @default(false) @map("data_sharing")
  analyticsTracking     Boolean       @default(true) @map("analytics_tracking")
  personalizedAds       Boolean       @default(false) @map("personalized_ads")
  
  // Display preferences
  dashboardLayout       String        @default("standard") @map("dashboard_layout")
  chartType             String        @default("line") @map("chart_type")
  themeMode             String        @default("light") @map("theme_mode")
  compactView           Boolean       @default(false) @map("compact_view")
  showBalances          Boolean       @default(true) @map("show_balances")
  
  // Financial preferences
  defaultCurrency       Currency      @default(MXN) @map("default_currency")
  hideSensitiveData     Boolean       @default(false) @map("hide_sensitive_data")
  autoCategorizeTxns    Boolean       @default(true) @map("auto_categorize_txns")
  includeWeekends       Boolean       @default(true) @map("include_weekends")
  
  // ESG preferences
  esgScoreVisibility    Boolean       @default(true) @map("esg_score_visibility")
  sustainabilityAlerts  Boolean       @default(false) @map("sustainability_alerts")
  impactReporting       Boolean       @default(false) @map("impact_reporting")
  
  // Backup and export
  autoBackup            Boolean       @default(false) @map("auto_backup")
  backupFrequency       String?       @map("backup_frequency")
  exportFormat          String        @default("csv") @map("export_format")
  
  createdAt             DateTime      @default(now()) @map("created_at")
  updatedAt             DateTime      @updatedAt @map("updated_at")

  // Relations
  user                  User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model Session {
  id               String        @id @default(uuid())
  userId           String        @map("user_id")
  tokenFamily      String        @unique @map("token_family")
  refreshTokenHash String        @map("refresh_token_hash")
  expiresAt        DateTime      @map("expires_at")
  createdAt        DateTime      @default(now()) @map("created_at")
  updatedAt        DateTime      @updatedAt @map("updated_at")

  // Relations
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([tokenFamily])
  @@map("sessions")
}

model ProviderConnection {
  id                String        @id @default(uuid())
  userId            String        @map("user_id")
  provider          Provider
  providerUserId    String        @map("provider_user_id")
  encryptedToken    String        @map("encrypted_token")
  metadata          Json?
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")

  // Relations
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, provider, providerUserId])
  @@index([userId])
  @@map("provider_connections")
}

model Space {
  id               String        @id @default(uuid())
  name             String
  type             SpaceType
  currency         Currency      @default(MXN)
  timezone         String        @default("America/Mexico_City")
  createdAt        DateTime      @default(now()) @map("created_at")
  updatedAt        DateTime      @updatedAt @map("updated_at")

  // Relations
  userSpaces       UserSpace[]
  accounts         Account[]
  budgets          Budget[]
  transactionRules TransactionRule[]

  @@map("spaces")
}

model UserSpace {
  userId           String        @map("user_id")
  spaceId          String        @map("space_id")
  role             SpaceRole
  createdAt        DateTime      @default(now()) @map("created_at")

  // Relations
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  space            Space         @relation(fields: [spaceId], references: [id], onDelete: Cascade)

  @@id([userId, spaceId])
  @@map("user_spaces")
}

model Account {
  id                    String            @id @default(uuid())
  spaceId               String            @map("space_id")
  provider              Provider
  providerAccountId     String?           @map("provider_account_id")
  name                  String
  type                  AccountType
  subtype               String?
  currency              Currency
  balance               Decimal           @default(0) @db.Decimal(19, 4)
  encryptedCredentials  Json?             @map("encrypted_credentials")
  metadata              Json?
  lastSyncedAt          DateTime?         @map("last_synced_at")
  createdAt             DateTime          @default(now()) @map("created_at")
  updatedAt             DateTime          @updatedAt @map("updated_at")

  // Relations
  space                 Space             @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  transactions          Transaction[]
  assetValuations       AssetValuation[]
  esgScores             ESGScore[]
  connection            Connection?

  @@unique([spaceId, provider, providerAccountId])
  @@index([spaceId])
  @@map("accounts")
}

model Connection {
  id               String            @id @default(uuid())
  accountId        String            @unique @map("account_id")
  status           ConnectionStatus
  error            String?
  metadata         Json?
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")

  // Relations
  account          Account           @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@map("connections")
}

model Transaction {
  id                    String        @id @default(uuid())
  accountId             String        @map("account_id")
  providerTransactionId String?       @map("provider_transaction_id")
  amount                Decimal       @db.Decimal(19, 4)
  currency              Currency
  description           String
  merchant              String?
  categoryId            String?       @map("category_id")
  date                  DateTime      @db.Date
  pending               Boolean       @default(false)
  metadata              Json?
  createdAt             DateTime      @default(now()) @map("created_at")
  updatedAt             DateTime      @updatedAt @map("updated_at")

  // Relations
  account               Account       @relation(fields: [accountId], references: [id], onDelete: Cascade)
  category              Category?     @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  @@unique([accountId, providerTransactionId])
  @@index([accountId, date(sort: Desc)])
  @@index([categoryId])
  @@map("transactions")
}

model Category {
  id               String        @id @default(uuid())
  budgetId         String        @map("budget_id")
  name             String
  budgetedAmount   Decimal       @map("budgeted_amount") @db.Decimal(19, 4)
  icon             String?
  color            String?
  description      String?
  createdAt        DateTime      @default(now()) @map("created_at")
  updatedAt        DateTime      @updatedAt @map("updated_at")

  // Relations
  budget           Budget        @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  transactions     Transaction[]

  @@unique([budgetId, name])
  @@index([budgetId])
  @@map("categories")
}

model TransactionRule {
  id               String        @id @default(uuid())
  spaceId          String        @map("space_id")
  name             String
  conditions       Json
  categoryId       String        @map("category_id")
  priority         Int           @default(0)
  enabled          Boolean       @default(true)
  createdAt        DateTime      @default(now()) @map("created_at")
  updatedAt        DateTime      @updatedAt @map("updated_at")

  // Relations
  space            Space         @relation(fields: [spaceId], references: [id], onDelete: Cascade)

  @@index([spaceId, enabled])
  @@map("transaction_rules")
}

model Budget {
  id               String            @id @default(uuid())
  spaceId          String            @map("space_id")
  name             String
  period           BudgetPeriod
  startDate        DateTime          @map("start_date") @db.Date
  endDate          DateTime?         @map("end_date") @db.Date
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")

  // Relations
  space            Space             @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  categories       Category[]

  @@index([spaceId])
  @@map("budgets")
}

model AssetValuation {
  id               String        @id @default(uuid())
  accountId        String        @map("account_id")
  date             DateTime      @db.Date
  value            Decimal       @db.Decimal(19, 4)
  currency         Currency
  createdAt        DateTime      @default(now()) @map("created_at")

  // Relations
  account          Account       @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@unique([accountId, date])
  @@index([accountId, date(sort: Desc)])
  @@map("asset_valuations")
}

model ESGScore {
  id                  String        @id @default(uuid())
  accountId           String        @map("account_id")
  assetSymbol         String        @map("asset_symbol")
  environmentalScore  Decimal?      @map("environmental_score") @db.Decimal(5, 2)
  socialScore         Decimal?      @map("social_score") @db.Decimal(5, 2)
  governanceScore     Decimal?      @map("governance_score") @db.Decimal(5, 2)
  compositeScore      Decimal?      @map("composite_score") @db.Decimal(5, 2)
  calculatedAt        DateTime      @map("calculated_at")
  metadata            Json?
  createdAt           DateTime      @default(now()) @map("created_at")

  // Relations
  account             Account       @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@index([accountId, calculatedAt(sort: Desc)])
  @@map("esg_scores")
}

model AuditLog {
  id               String        @id @default(uuid())
  userId           String?       @map("user_id")
  action           String
  resource         String?
  resourceId       String?       @map("resource_id")
  metadata         String?       // JSON string
  ipAddress        String?       @map("ip_address")
  userAgent        String?       @map("user_agent")
  severity         String        @default("low") // low, medium, high, critical
  timestamp        DateTime      @default(now())
  createdAt        DateTime      @default(now()) @map("created_at")

  // Relations
  user             User?         @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId, action, timestamp(sort: Desc)])
  @@index([resource, resourceId])
  @@index([severity, timestamp(sort: Desc)])
  @@map("audit_logs")
}

model WebhookEvent {
  id               String        @id @default(uuid())
  provider         Provider
  eventType        String        @map("event_type")
  payload          Json
  signature        String
  processed        Boolean       @default(false)
  error            String?
  createdAt        DateTime      @default(now()) @map("created_at")
  processedAt      DateTime?     @map("processed_at")

  @@index([provider, processed, createdAt])
  @@map("webhook_events")
}

model ErrorLog {
  id            String        @id @default(uuid())
  timestamp     DateTime      @default(now())
  level         String
  message       String
  stack         String?
  context       Json?
  metadata      Json?
  createdAt     DateTime      @default(now()) @map("created_at")

  @@index([timestamp])
  @@index([level])
  @@index([message])
  @@map("error_logs")
}

model ExchangeRate {
  id            String        @id @default(uuid())
  fromCurrency  Currency      @map("from_currency")
  toCurrency    Currency      @map("to_currency")
  rate          Float
  date          DateTime      @db.Date
  source        String        @default("banxico")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")

  @@unique([fromCurrency, toCurrency, date])
  @@index([fromCurrency, toCurrency])
  @@index([date])
  @@map("exchange_rates")
}